/*!

=========================================================
* Argon Dashboard React - v1.2.4
=========================================================

=========================================================

*/

// reactstrap components
import {
  Button,
  Card,
  CardHeader,
  CardBody,
  FormGroup,
  Form,
  Input,
  InputGroupAddon,
  InputGroupText,
  InputGroup,
  Row,
  Col,
  Alert,
} from "reactstrap";
import { Link, useNavigate } from "react-router-dom";
import { useState } from "react";
import GoogleOAuthButton from "../../components/GoogleOAuthButton";
import apiService from "../../services/api";

const Register = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    role: "",
    full_name: "",
    email: "",
    student_num: "",
    program: "",
    section_id: "",
    contact_num: "",
    address: "",
    password: "",
    confirmPassword: ""
  });
  const [passwordVisible, setPasswordVisible] = useState({
    password: false,
    confirmPassword: false
  });
  const [termsAgreed, setTermsAgreed] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  const handleGoogleSuccess = (userData, variant) => {
    console.log('Google registration successful:', userData);
    setSuccess("Registration successful! Redirecting...");
    setTimeout(() => {
      // Navigate based on user role
      const role = userData.role || (userData.user && userData.user.role);
      if (role === "student") {
        navigate("/student/index");
      } else if (role === "admin") {
        navigate("/admin/index");
      } else if (role === "teacher") {
        navigate("/teacher/index");
      } else {
        navigate("/");
      }
    }, 1500);
  };

  const handleGoogleError = (errorMessage) => {
    setError(errorMessage);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const togglePasswordVisibility = (fieldName) => {
    setPasswordVisible(prev => ({
      ...prev,
      [fieldName]: !prev[fieldName]
    }));
  };

  const validateForm = () => {
    if (!formData.role) {
      setError("Please select a role");
      return false;
    }
    if (!formData.full_name.trim()) {
      setError("Full name is required");
      return false;
    }
    if (!formData.email.trim()) {
      setError("Email is required");
      return false;
    }
    if (formData.role === "student" && !formData.student_num.trim()) {
      setError("Student number is required for students");
      return false;
    }
    if (!formData.password) {
      setError("Password is required");
      return false;
    }
    if (formData.password !== formData.confirmPassword) {
      setError("Passwords do not match");
      return false;
    }
    if (!termsAgreed) {
      setError("You must agree to the terms and conditions");
      return false;
    }
    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setSuccess("");

    if (!validateForm()) {
      return;
    }

    setLoading(true);

    try {
      // Prepare registration data based on role
      const registrationData = {
        role: formData.role,
        full_name: formData.full_name,
        email: formData.email,
        contact_num: formData.contact_num,
        address: formData.address,
        password: formData.password
      };

      // Add role-specific fields
      if (formData.role === "student") {
        registrationData.student_num = formData.student_num;
        registrationData.program = formData.program;
        if (formData.section_id) {
          registrationData.section_id = formData.section_id;
        }
        // QR code will be auto-generated by the backend
        registrationData.qr_code = `IDNo: ${formData.student_num}\nFull Name: ${formData.full_name}\nProgram: ${formData.program}`;
      } else if (formData.role === "teacher") {
        registrationData.program = formData.program;
      }

      const response = await apiService.register(registrationData);
      
      setSuccess("Registration successful! Redirecting to login...");
      setTimeout(() => {
        navigate("/auth/login");
      }, 2000);
      
    } catch (error) {
      setError(error.message || "Registration failed. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const renderRoleSpecificFields = () => {
    if (formData.role === "student") {
      return (
        <>
          <FormGroup>
            <InputGroup className="input-group-alternative mb-2">
              <InputGroupAddon addonType="prepend">
                <InputGroupText>
                  <i className="ni ni-badge" />
                </InputGroupText>
              </InputGroupAddon>
              <Input
                placeholder="Student Number"
                type="text"
                name="student_num"
                value={formData.student_num}
                onChange={handleInputChange}
                required
              />
            </InputGroup>
          </FormGroup>
          <FormGroup>
            <InputGroup className="input-group-alternative mb-2">
              <InputGroupAddon addonType="prepend">
                <InputGroupText>
                  <i className="ni ni-books" />
                </InputGroupText>
              </InputGroupAddon>
              <Input
                placeholder="Program/Course"
                type="text"
                name="program"
                value={formData.program}
                onChange={handleInputChange}
                required
              />
            </InputGroup>
          </FormGroup>
          <FormGroup>
            <InputGroup className="input-group-alternative mb-2">
              <InputGroupAddon addonType="prepend">
                <InputGroupText>
                  <i className="ni ni-building" />
                </InputGroupText>
              </InputGroupAddon>
              <Input
                placeholder="Section ID (Optional)"
                type="text"
                name="section_id"
                value={formData.section_id}
                onChange={handleInputChange}
              />
            </InputGroup>
          </FormGroup>
        </>
      );
    } else if (formData.role === "teacher") {
      return (
        <FormGroup>
          <InputGroup className="input-group-alternative mb-3">
            <InputGroupAddon addonType="prepend">
              <InputGroupText>
                <i className="ni ni-books" />
              </InputGroupText>
            </InputGroupAddon>
            <Input
              placeholder="Department/Subject Area"
              type="text"
              name="program"
              value={formData.program}
              onChange={handleInputChange}
              required
            />
          </InputGroup>
        </FormGroup>
      );
    }
    return null;
  };

  return (
    <>
      <Col lg="6" md="8">
        <Card className="bg-secondary shadow border-0">
          <CardHeader className="bg-transparent pb-3">
            <div className="text-center mt-2 mb-2">
              <h2>Register</h2>
            </div>
            <div className="text-muted text-center mb-2">
              <small>Sign up with</small>
            </div>
            <div className="btn-wrapper text-center">
              <GoogleOAuthButton
                text="Sign up with Google"
                variant="sign-up"
                onSuccess={handleGoogleSuccess}
                onError={handleGoogleError}
                disabled={loading}
                className="w-100"
              />
            </div>
          </CardHeader>
          <CardBody className="px-lg-5 py-lg-4">
            <div className="text-center text-muted mb-3">
              <small>Or sign up with credentials</small>
            </div>
            
            {error && <Alert color="danger">{error}</Alert>}
            {success && <Alert color="success">{success}</Alert>}
            
            <Form role="form" onSubmit={handleSubmit}>
              {/* Role Selection Dropdown */}
              <FormGroup>
                <InputGroup className="input-group-alternative mb-2">
                  <InputGroupAddon addonType="prepend">
                    <InputGroupText>
                      <i className="ni ni-circle-08" />
                    </InputGroupText>
                  </InputGroupAddon>
                  <Input
                    type="select"
                    name="role"
                    value={formData.role}
                    onChange={handleInputChange}
                    required
                  >
                    <option value="">Select Role</option>
                    <option value="student">Student</option>
                    <option value="teacher">Teacher</option>
                    <option value="admin">Administrator</option>
                  </Input>
                </InputGroup>
              </FormGroup>

              {/* Full Name */}
              <FormGroup>
                <InputGroup className="input-group-alternative mb-2">
                  <InputGroupAddon addonType="prepend">
                    <InputGroupText>
                      <i className="ni ni-hat-3" />
                    </InputGroupText>
                  </InputGroupAddon>
                  <Input
                    placeholder="Full Name"
                    type="text"
                    name="full_name"
                    value={formData.full_name}
                    onChange={handleInputChange}
                    required
                  />
                </InputGroup>
              </FormGroup>

              {/* Email */}
              <FormGroup>
                <InputGroup className="input-group-alternative mb-2">
                  <InputGroupAddon addonType="prepend">
                    <InputGroupText>
                      <i className="ni ni-email-83" />
                    </InputGroupText>
                  </InputGroupAddon>
                  <Input
                    placeholder="Email"
                    type="email"
                    name="email"
                    value={formData.email}
                    onChange={handleInputChange}
                    autoComplete="new-email"
                    required
                  />
                </InputGroup>
              </FormGroup>

              {/* Role-specific fields */}
              {renderRoleSpecificFields()}

              {/* Contact Number */}
              <FormGroup>
                <InputGroup className="input-group-alternative mb-2">
                  <InputGroupAddon addonType="prepend">
                    <InputGroupText>
                      <i className="ni ni-mobile-button" />
                    </InputGroupText>
                  </InputGroupAddon>
                  <Input
                    placeholder="Contact Number"
                    type="tel"
                    name="contact_num"
                    value={formData.contact_num}
                    onChange={handleInputChange}
                  />
                </InputGroup>
              </FormGroup>

              {/* Address */}
              <FormGroup>
                <InputGroup className="input-group-alternative mb-2">
                  <InputGroupAddon addonType="prepend">
                    <InputGroupText>
                      <i className="ni ni-pin-3" />
                    </InputGroupText>
                  </InputGroupAddon>
                  <Input
                    placeholder="Address"
                    type="text"
                    name="address"
                    value={formData.address}
                    onChange={handleInputChange}
                  />
                </InputGroup>
              </FormGroup>

              {/* Password */}
              <FormGroup>
                <InputGroup className="input-group-alternative mb-2">
                  <InputGroupAddon addonType="prepend">
                    <InputGroupText>
                      <i className="ni ni-lock-circle-open" />
                    </InputGroupText>
                  </InputGroupAddon>
                  <div className="position-relative">
                    <Input
                      placeholder="Password"
                      type={passwordVisible.password ? "text" : "password"}
                      name="password"
                      value={formData.password}
                      onChange={handleInputChange}
                      autoComplete="new-password"
                      required
                    />
                    <button
                      type="button"
                      className="btn btn-link position-absolute"
                      style={{
                        right: '10px',
                        top: '50%',
                        transform: 'translateY(-50%)',
                        zIndex: 10,
                        border: 'none',
                        background: 'none',
                        padding: '0',
                        color: '#6c757d',
                        cursor: 'pointer',
                        width: '20px',
                        height: '20px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}
                      onClick={() => togglePasswordVisibility('password')}
                      disabled={loading}
                    >
                      {passwordVisible.password ? (
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                          <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                        </svg>
                      ) : (
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                          <path d="M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"/>
                        </svg>
                      )}
                    </button>
                  </div>
                </InputGroup>
              </FormGroup>

              {/* Confirm Password */}
              <FormGroup>
                <InputGroup className="input-group-alternative mb-2">
                  <InputGroupAddon addonType="prepend">
                    <InputGroupText>
                      <i className="ni ni-lock-circle-open" />
                    </InputGroupText>
                  </InputGroupAddon>
                  <div className="position-relative">
                    <Input
                      placeholder="Confirm Password"
                      type={passwordVisible.confirmPassword ? "text" : "password"}
                      name="confirmPassword"
                      value={formData.confirmPassword}
                      onChange={handleInputChange}
                      autoComplete="new-password"
                      required
                    />
                    <button
                      type="button"
                      className="btn btn-link position-absolute"
                      style={{
                        right: '10px',
                        top: '50%',
                        transform: 'translateY(-50%)',
                        zIndex: 10,
                        border: 'none',
                        background: 'none',
                        padding: '0',
                        color: '#6c757d',
                        cursor: 'pointer',
                        width: '20px',
                        height: '20px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}
                      onClick={() => togglePasswordVisibility('confirmPassword')}
                      disabled={loading}
                    >
                      {passwordVisible.confirmPassword ? (
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                          <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                        </svg>
                      ) : (
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                          <path d="M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"/>
                        </svg>
                      )}
                    </button>
                  </div>
                </InputGroup>
              </FormGroup>

              <div className="text-muted font-italic">
                <small>
                  password strength:{" "}
                  <span className={`font-weight-700 ${formData.password.length >= 8 ? 'text-success' : formData.password.length >= 6 ? 'text-warning' : 'text-danger'}`}>
                    {formData.password.length >= 8 ? 'strong' : formData.password.length >= 6 ? 'medium' : 'weak'}
                  </span>
                </small>
              </div>

              <Row className="my-4">
                <Col xs="12">
                  <div className="custom-control custom-control-alternative custom-checkbox">
                    <input
                      className="custom-control-input"
                      id="customCheckRegister"
                      type="checkbox"
                      checked={termsAgreed}
                      onChange={(e) => setTermsAgreed(e.target.checked)}
                    />
                    <label
                      className="custom-control-label"
                      htmlFor="customCheckRegister"
                    >
                      <span className="text-muted">
                        I agree with the{" "}
                        <a href="#pablo" onClick={(e) => e.preventDefault()}>
                          Privacy Policy
                        </a>
                      </span>
                    </label>
                  </div>
                </Col>
              </Row>
              <div className="text-center">
                <Button 
                  className="mt-4" 
                  color="primary" 
                  type="submit"
                  disabled={loading}
                >
                  {loading ? "Creating account..." : "Create account"}
                </Button>
              </div>
            </Form>
          </CardBody>
        </Card>
        <Row className="mt-3">
          <Col xs="6">
            <Link
              className="text-light"
              to="/auth/forgot-password"
            >
              <small>Forgot password?</small>
            </Link>
          </Col>
          <Col className="text-right" xs="6">
            <Link
              className="text-light"
              to="/auth/login"
            >
              <small>Already have an account?</small>
            </Link>
          </Col>
        </Row>
      </Col>
    </>
  );
};

export default Register;
